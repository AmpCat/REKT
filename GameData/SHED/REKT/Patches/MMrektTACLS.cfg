//REKT mk1A Escape Pod  -	-	-	-	-	-	-	-	-	-	-
@PART[rektmk1a]:NEEDS[TacLifeSupport]:FINAL  
{ 

// Short term habitation, 6 crew days of food, waste, O2, Water, CO2 and waste water storage.
	%RESOURCE[ElectricCharge]
	{
		%amount = 325
		%maxAmount = 325
	}							
	RESOURCE[Food] 
	{ 
		%amount = 2.2
		%maxAmount = 2.2 
	} 
	RESOURCE[Water] 
	{ 
		%amount = 1.46 
		%maxAmount = 1.46 
	} 
	RESOURCE[Oxygen] 
	{ 
		%amount = 222.08
		%maxAmount = 222.08
	} 
	RESOURCE[CarbonDioxide] 
	{ 
		%amount = 0 
		%maxAmount = 191.826 
	} 
	RESOURCE[WasteWater] 
	{ 
		%amount = 0 
		%maxAmount = 1.848 
	} 
	RESOURCE[Waste] 
	{ 
		%amount = 0 
		%maxAmount = 0.2
	} 
	MODULE:NEEDS[IndicatorLights]
	{
		name = ModuleScalarLevelIndicator
		controllerName = TACLevel 
		// Use minimum input value. Also supports "maximum" and "average" 
		operation = minimum 
		inputs = FoodLevel, OxygenLevel, WaterLevel, ElectricChargeLevel
		highColor = $HighResource 
		mediumColor = $MediumResource 
		lowColor = $LowResource 
		criticalColor = pulsate($LowResource, 1200, 1, 0.6) 
	} 
	MODULE:NEEDS[IndicatorLights]
	{ 
 		name = ModuleBooleanIndicator 
 		// Use logical AND of inputs.  Also supports "or" 
		operation = and 
		// Note that you can put a "!" in front of a boolean input to invert it 
 		inputs = FoodEnabled, OxygenEnabled, WaterEnabled, ElectricChargeEnabled
 		activeColor = TACLevel 
 		inactiveColor = blink(dualLevel, 900, $Off, 300) 
 		emissiveName = beacon 
 	} 
} 



//REKT mk1N Escape Pod -	-	-	-	-	-	-	-	-	-	-
@PART[rektmk1n]:NEEDS[TacLifeSupport]:FINAL  
{ 

// Short term habitation, 6 crew days of food, waste, O2, Water, CO2 and waste water storage. 
	%RESOURCE[ElectricCharge]
	{
		%amount = 330
		%maxAmount = 330
	}	
	RESOURCE[Food] 
	{ 
		amount = 2.2
		maxAmount = 2.2 
	} 
	RESOURCE[Water] 
	{ 
		amount = 1.46 
		maxAmount = 1.46 
	} 
	RESOURCE[Oxygen] 
	{ 
		amount = 222.08 
		maxAmount = 222.08
	} 
	RESOURCE[CarbonDioxide] 
	{ 
		amount = 0 
		maxAmount = 191.826
	} 
	RESOURCE[Waste] 
	{ 
		amount = 0 
		maxAmount = 0.2 
	} 
	RESOURCE[WasteWater] 
	{ 
		amount = 0 
		maxAmount = 1.848
	} 
	MODULE:NEEDS[IndicatorLights]
	{
		name = = ModuleScalarLevelIndicator
		controllerName = TACLevel 
		// Use minimum input value. Also supports "maximum" and "average" 
		operation = minimum 
		inputs = FoodLevel, OxygenLevel, WaterLevel, ElectricChargeLevel
		highColor = $HighResource 
		mediumColor = $MediumResource 
		lowColor = $LowResource 
		criticalColor = pulsate($LowResource, 1200, 1, 0.6) 
	} 
	MODULE:NEEDS[IndicatorLights]
	{ 
 		name = ModuleBooleanIndicator 
 		// Use logical AND of inputs.  Also supports "or" 
		operation = and 
		// Note that you can put a "!" in front of a boolean input to invert it 
 		inputs = FoodEnabled, OxygenEnabled, WaterEnabled, ElectricChargeEnabled
 		activeColor = TACLevel 
 		inactiveColor = blink(dualLevel, 900, $Off, 300) 
 		emissiveName = beacon
 	} 
}


//REKT mk1D Escape Pod -	-	-	-	-	-	-	-	-	-	- 
@PART[rektmk1d]:NEEDS[TacLifeSupport]:FINAL  
{ 

// Short term habitation, 30 crew days of food, waste, O2, Water, CO2 and waste water storage. 
	%RESOURCE[ElectricCharge]
	{
		%amount = 645	
		5maxAmount = 645
	}
	RESOURCE[Food] 
	{ 
		amount = 11 
		maxAmount = 11 
	} 
	RESOURCE[Water] 
	{ 
		amount = 7.3 
		maxAmount = 7.3 
	} 
	RESOURCE[Oxygen] 
	{ 
		amount = 1110.4 
		maxAmount = 1110.4 
	} 
	RESOURCE[CarbonDioxide] 
	{ 
		amount = 0 
		maxAmount = 959.13 
	} 
	RESOURCE[Waste] 
	{ 
		amount = 0 
		maxAmount = 1 
	} 
	RESOURCE[WasteWater] 
	{ 
		amount = 0 
		maxAmount = 9.24
	}
	MODULE:NEEDS[IndicatorLights]
	{
		name = ModuleScalarLevelIndicator
		controllerName = TACLevel 
		// Use minimum input value. Also supports "maximum" and "average" 
		operation = minimum 
		inputs = FoodLevel, OxygenLevel, WaterLevel, ElectricChargeLevel
		highColor = $HighResource 
		mediumColor = $MediumResource 
		lowColor = $LowResource 
		criticalColor = pulsate($LowResource, 1200, 1, 0.6) 
	} 
	MODULE:NEEDS[IndicatorLights] 
	{ 
 		name = ModuleBooleanIndicator 
 		// Use logical AND of inputs.  Also supports "or" 
		operation = and 
		// Note that you can put a "!" in front of a boolean input to invert it 
 		inputs = FoodEnabled, OxygenEnabled, WaterEnabled, ElectricChargeEnabled
 		activeColor = TACLevel 
 		inactiveColor = blink(dualLevel, 900, $Off, 300) 
 		emissiveName = beacon 
 	} 
}  
// REKT Mk1c Cryo Pod - - - - - - - 

@PART[rektCryoPod]:NEEDS[TacLifeSupport]:FINAL
{
// add additonal EC to the CryoPod for breif period of Life Support system functionality should not disrupt the ability to Freeze
// TAC-LS will add the other Life Support elements for 3 days supply
	@RESOURCE[ElectricCharge]
	{
		%amount = 330
		%maxAmount = 330
	}
}

// OTAV Core - - - - - - - 

@PART[rektOTAVcore2]:NEEDS[TacLifeSupport]:FINAL
{
// add additonal EC to the OTAV core for Life Support system functionality
// TAC-LS will add the other Life Support elements for 3 days supply
	@RESOURCE[ElectricCharge]
	{
		%amount = 330
		%maxAmount = 330
	}
}	
